@page "/survey/{surveyId:guid}"

<PageTitle>Answer Survey</PageTitle>

@if (survey == null)
{
    <p>Loading...</p>
}
else
{
    var questionNumber = 0;
    <EditForm Model="feedbackForm" OnValidSubmit="SaveFeedback" FormName="answer-survey">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h1>@survey.Title</h1>

        @foreach (var question in survey.Questions)
        {
            <div class="mb-3 card p-4">
                <h4 class="mb-3">@(questionNumber). @question.Title</h4>
                @if (question.Type == QuestionType.SingleChoice)
                {
                    for (int i = 0; i < question.Answers.Count; i++)
                    {
                        <InputRadioGroup class="form-check mb-2" @bind-Value="inputs[questionNumber]">
                            <InputRadio class="form-check-input" name="@($"answer_{question.Id}")" id="@($"answer_{question.Id}_{question.Answers[i].Id}")" Value="@question.Answers[i].Id.ToString()"/>
                            <label class="form-check-label" for="@($"answer_{question.Id}_{question.Answers[i].Id}")">@question.Answers[i].Text</label>
                        </InputRadioGroup>
                    }
                }
                else
                {
                    <div class="form-group">
                        <InputTextArea @bind-Value="inputs[questionNumber]" class="form-control" rows="3" />
                    </div>
                }
            </div>

            questionNumber++;
        }
        @if (!isOwner)
        {
            <button type="submit" class="btn btn-primary">Submit</button>
        }
    </EditForm>
}

@code {
    [Parameter]
    public Guid surveyId { get; set; }
    public bool isOwner = false;

    public Survey survey;
    private string currentUserId;
    private List<string> inputs { get; set; } = new();
    public FeedbackAnswer feedback = new();
    public FeedbackForm feedbackForm = new();

    public class FeedbackForm()
    {
        
    }
    protected override async Task OnInitializedAsync()
    {
        survey = await SurveyService.GetSurveyByIdAsync(surveyId);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (survey == null)
        {
            Navigation.NavigateTo("/404");
            return;
        }
        if (survey.UserId == currentUserId)
        {
            isOwner = true;
        }
    }
    private async Task SaveFeedback()
    {
        if (currentUserId != null)
        {
            feedback.UserId = Guid.Parse(currentUserId);
        };
        //await SurveyService.SubmitFeedbackAsync(feedback);
        //Navigation.NavigateTo("/survey/thankyou");
    }
}
