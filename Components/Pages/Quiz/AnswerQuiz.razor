@page "/quiz/{surveyId:guid}"
@rendermode InteractiveServer

<PageTitle>Answer Quiz</PageTitle>

@if (survey == null)
{
    <p>Loading...</p>
}
else
{
    var questionNumber = 0;
    <EditForm Model="model" OnValidSubmit="SaveScore" FormName="answer-survey">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h1>@survey.Title</h1>

    @{
            var questionNumber = 1;
        }

        @foreach (var question in survey.Questions)
        {
            <div class="mb-3 card p-4">
                <h4 class="mb-3">@if (question.IsRequired)
                    {
                        <span>*</span>
                    } @(questionNumber). @question.Title
                </h4>
                @if (question.Type == QuestionType.SingleChoice)
                {
                    foreach (var answer in question.Answers)
                    {
                        <div class="form-check mb-2">
                            <input type="radio" class="form-check-input" name="@($"answer_{question.Id}")"
                                id="@($"answer_{question.Id}_{answer.Id}")" @onchange="@((e) => OnRadioChanged(question.Id, answer.Id))" />
                            <label class="form-check-label" for="@($"answer_{question.Id}_{answer.Id}")">@answer.Text</label> 
                        </div>
                    }
                }
                else if (question.Type == QuestionType.MultipleChoice)
                {
                    foreach (var answer in question.Answers)
                    {
                        <div class="form-check mb-2">
                            <input type="checkbox" class="form-check-input" id="@($"answer_{question.Id}_{answer.Id}")"
                                @onchange="@((e) => OnCheckboxChanged(question.Id, answer.Id, e))"/>
                            <label class="form-check-label" for="@($"answer_{question.Id}_{answer.Id}")">@answer.Text</label>
                            </div>
                    }
                }
                </div>

            questionNumber++;
        }

        <button type="submit" class="btn btn-primary">Submit</button>
        
        </EditForm>
}

@code {
    [Parameter]
    public Guid surveyId { get; set; }
    public bool isOwner = false;
    public int score;
    public Survey survey;
    private string currentUserId;
    private Dictionary<Guid, List<int>> selectedAnswers = new();
    public QuizModel model { get; set; } = new();
    public class QuizModel()
    {

    }
    private void OnRadioChanged(Guid questionId, int answerId)
    {
        selectedAnswers[questionId] = new List<int> { answerId };
    }

    private void OnCheckboxChanged(Guid questionId, int answerId, ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value;
        if (!selectedAnswers.ContainsKey(questionId))
        {
            selectedAnswers[questionId] = new List<int>();
        }
        if (isChecked)
        {
            selectedAnswers[questionId].Add(answerId);
        }
        else
        {
            selectedAnswers[questionId].Remove(answerId);
        }
        Console.WriteLine("check");
    }
    protected override async Task OnInitializedAsync()
    {
        survey = await SurveyService.GetSurveyByIdAsync(surveyId);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (survey == null)
        {
            Navigation.NavigateTo("/404");
            return;
        }
        if (survey.UserId == currentUserId)
        {
            isOwner = true;
        }
    }
    private async Task SaveScore()
    {
        score = 0;
        foreach (var question in survey.Questions)
        {
            if (question.Type == QuestionType.SingleChoice || question.Type == QuestionType.MultipleChoice)
            {
                if (selectedAnswers.ContainsKey(question.Id))
                {
                    var correctAnswers = question.Answers.Where(a => a.IsCorrect).Select(a => a.Id).ToList();
                    if (question.Type == QuestionType.SingleChoice)
                    {
                        if (selectedAnswers[question.Id].SequenceEqual(correctAnswers))
                        {
                            score++;
                        }
                    }
                    else if (question.Type == QuestionType.MultipleChoice)
                    {
                        if (selectedAnswers[question.Id].All(correctAnswers.Contains) && selectedAnswers[question.Id].Count == correctAnswers.Count)
                        {
                            score++;
                        }
                    }
                }
            }
        }
        Navigation.NavigateTo($"/quiz/score/{score}");
    }
}
